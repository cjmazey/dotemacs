#+TITLE: Emacs Configuration
#+OPTIONS: num:nil
#+STARTUP: indent

* Tangle

Execute to create =init.el=.

#+BEGIN_SRC emacs-lisp :tangle no :results silent
  (org-babel-tangle-file
   (expand-file-name "init.org" user-emacs-directory)
   (expand-file-name "init.el" user-emacs-directory)
   "emacs-lisp")
#+END_SRC

* Initialization

** Customize

Don't really use customize.

#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el"
                          user-emacs-directory))
  ;(load custom-file)
#+END_SRC

** Package

Set up =package=.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/"))
  (package-initialize)
#+END_SRC

** Use-package

Install =use-package= if it isn't there.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

* Settings

Miscellaneous things that don't fit anywhere else.

#+BEGIN_SRC emacs-lisp
  (use-package init-meta
    :defer t
    :init
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    (add-hook 'text-mode-hook 'auto-fill-mode)
    (column-number-mode 1)
    (global-hl-line-mode 1)
    (set-language-environment "UTF-8")
    (setq auto-save-default nil)
    (setq default-frame-alist
          '((width . 100)
            (height . 40)
            (menu-bar-lines . 0)
            (vertical-scroll-bars . nil)
            (tool-bar-lines . 0)))
    (setq indent-tabs-mode nil)
    (setq inhibit-startup-echo-area-message t)
    ;(setq inhibit-startup-message t)
    (setq major-mode 'text-mode)
    (setq make-backup-files nil)
    (setq mouse-wheel-progressive-speed nil)
    (setq mouse-wheel-scroll-amount (quote (1 ((shift) . 1) ((control)))))
    (setq require-final-newline t)
    (setq scroll-conservatively 101)
    (setq visible-bell t)
    (show-paren-mode 1)
    (size-indication-mode 1))
#+END_SRC

* Appearance

** Themes

#+BEGIN_SRC emacs-lisp
  (use-package theme-meta
    :defer t
    :init
    (use-package alect-themes :ensure t :defer t)
    (use-package ample-theme :ensure t :defer t)
    (use-package apropospriate-theme :ensure t :defer t)
    (use-package autumn-light-theme :ensure t :defer t)
    (use-package colorsarenice-theme :ensure t :defer t)
    (use-package faff-theme :ensure t :defer t)
    (use-package farmhouse-theme :ensure t :defer t)
    (use-package green-phosphor-theme :ensure t :defer t)
    (use-package hemisu-theme :ensure t :defer t)
    (use-package hydandata-light-theme :ensure t :defer t)
    (use-package iodine-theme :ensure t :defer t)
    (use-package leuven-theme :ensure t :defer t)
    (use-package majapahit-theme :ensure t :defer t)
    (use-package material-theme :ensure t :defer t)
    (use-package minimal-theme :ensure t :defer t)
    (use-package moe-theme :ensure t :commands (moe-dark moe-light))
    (use-package monokai-theme :ensure t :defer t)
    (use-package org-beautify-theme :ensure t :defer t)
    (use-package paper-theme :ensure t :defer t)
    (use-package solarized-theme :ensure t :defer t)
    (use-package spacemacs-theme :ensure t :defer t)
    (use-package stekene-theme :ensure t :defer t)
    (use-package tao-theme :ensure t :defer t)
    (use-package ubuntu-theme :ensure t :defer t)
    (use-package zenburn-theme :ensure t :defer t)
    (use-package zonokai-theme :ensure t :defer t)
    (load-theme 'leuven 'no-confirm))

#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
  (use-package face-meta
    :defer t
    :init
    (let ((font "IBM 3270 Medium"))
      (set-face-attribute 'default nil
                          :font (concat font " 12"))
      (set-face-attribute 'fixed-pitch nil
                          :font (concat font " 12"))
      (set-face-attribute 'variable-pitch nil
                          :font "Noto Sans 10")
      (set-face-attribute 'Info-quoted nil
                          :font (concat font " 10")
                          :inherit font-lock-keyword-face)))
#+END_SRC

* Global keybindings

#+BEGIN_SRC emacs-lisp
  (use-package bind-key-meta
    :defer t
    :init
    (bind-key "M-<left>" 'windmove-left)
    (bind-key "M-<right>" 'windmove-right)
    (bind-key "M-<up>" 'windmove-up)
    (bind-key "M-<down>" 'windmove-down))
#+END_SRC

* Packages

** Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib
    :bind (("C-c o a" . org-agenda)
           ("C-c o b" . org-iswitchb)
           ("C-c o c" . org-capture)
           ("C-c o l" . org-store-link))
    :config
    (setq org-directory "~/.emacs.d/private")
    (setq org-agenda-files '("~/.emacs.d/private/agenda.org"))
    (setq org-archive-location "~/.emacs.d/private/archive.org::")
    (setq org-default-notes-file "~/.emacs.d/private/notes.org")
    (setq org-refile-use-outline-path t)
    (setq org-capture-templates
          '(("t" "Task" entry (file+headline "~/.emacs.d/private/agenda.org" "Tasks")
             "* TODO %?\n  %u\n  %a")
            ("p" "Poem" entry (file "~/.emacs.d/private/poems.org")
             "* UNPUBLISHED %?\n\n%i\n\n%U" :empty-lines 1)))
    (setq org-latex-create-formula-image-program 'imagemagick)
    (add-to-list 'org-latex-packages-alist '("" "tikz" t))
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (axiom . t)
       (latex . t)
       (maxima . t)
       (R . t)))
    (require 'org-habit)
    (setq org-habit-graph-column 55))
#+END_SRC

** Ace-window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure ace-window
    :bind ("M-p" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-dispatch-always t))
#+END_SRC

** Agda

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (defvar agda2-directory
      (file-name-directory (shell-command-to-string "agda-mode locate"))))

  (use-package agda-meta
    :defer t
    :init
    (use-package agda2
      :load-path agda2-directory
      :commands agda2-mode)
    (use-package agda-input
      :load-path agda2-directory))
#+END_SRC

** AUCTex

#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex
    :init
    (use-package company-auctex
      :ensure t
      :init (company-auctex-init))
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t))

#+END_SRC

** Axiom

#+BEGIN_SRC emacs-lisp
  (use-package axiom-meta
    :defer t
    :init
    (use-package axiom-environment
      :ensure t
      :commands run-axiom
      :bind ("C-c a" . axiom-selector)
      :init
      (setq axiom-process-program "~/src/fricas/usr/bin/fricas -nosman")
      (setq axiom-process-spad-source-dirs "~/src/fricas/usr/lib/fricas/target/x86_64-unknown-linux/src/algebra"))
    (use-package ob-axiom
      :ensure t
      :defer t))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config (global-company-mode 1)
    :diminish company-mode)
#+END_SRC

** ElDoc

#+BEGIN_SRC emacs-lisp
    (use-package eldoc
      :diminish eldoc-mode
      :config (global-eldoc-mode 1))
#+END_SRC

** ESS
#+BEGIN_SRC emacs-lisp
  (use-package ess-site
    :ensure ess
    :commands R)
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config (global-flycheck-mode 1))
#+END_SRC

** God mode

#+BEGIN_SRC emacs-lisp
  (use-package god-mode
    :disabled t
    :ensure t)

#+END_SRC

** Golden Ratio

#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :config (golden-ratio-mode)
    :diminish golden-ratio-mode)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-meta
    :defer t
    :init
    (use-package haskell-mode
      :ensure t)
    (use-package flycheck-haskell
      :ensure t))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm-config
    :ensure helm
    :demand t
    :bind (("C-S-z" . helm-buffers-list)
           ("C-x C-f" . helm-find-files)
           ("C-x p" . helm-browse-project)
           ("C-z" . helm-mini)
           ("M-x" . helm-M-x))
    :config
    (use-package helm-mode
      :diminish helm-mode
      :init (helm-mode 1))
    (use-package helm-ls-git
      :ensure helm-ls-git)
    (use-package helm-swoop
      :ensure t
      :bind (("M-s o" . helm-swoop)
             ("M-s /" . helm-multi-swoop))))
#+END_SRC

** Idris

#+BEGIN_SRC emacs-lisp
  (use-package idris-meta
    :defer t
    :init
    (use-package idris-mode
      :ensure t)
    (use-package helm-idris
      :ensure t))
#+END_SRC

** Lean Prover

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (defvar lean-rootdir
      "~/src/leanprover/usr")
    (defvar lean-emacs-path
      (concat lean-rootdir "/share/emacs/site-lisp/lean")))

  (use-package lean-mode
    :load-path lean-emacs-path
    :mode "\\.h?lean\\'"
    :init
    (use-package company :ensure t)
    (use-package dash :ensure t)
    (use-package dash-functional :ensure t)
    (use-package flycheck :ensure t)
    (use-package f :ensure t)
    (use-package fill-column-indicator
      :ensure t
      :config
      (setq fci-rule-column 90))
    (use-package s :ensure t)
    (use-package lua-mode :ensure t)
    (use-package mmm-mode :ensure t :diminish mmm-mode))
#+END_SRC

*** TODO Make that command create temporary directories

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode "\\.md\\'")
#+END_SRC

** Maxima

#+BEGIN_SRC emacs-lisp
  (use-package maxima
    :mode ("\\.mac\\'" . maxima-mode)
    :interpreter ("maxima" . maxima))
#+END_SRC

** Ocaml

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (defvar opam-site-lisp
      (concat
       (substring
        (shell-command-to-string "opam config var share 2> /dev/null")
        0 -1)
       "/emacs/site-lisp")))

  (use-package ocaml-meta
    :disabled t
    :defer t
    :init
    (use-package tuareg
      :ensure t
      :commands tuareg-mode)
    (use-package merlin
      :load-path opam-site-lisp
      :commands merlin-mode
      :init (add-hook 'tuareg-mode-hook 'merlin-mode))
    (use-package utop
      :load-path opam-site-lisp
      :commands (utop utop-minor-mode)
      :init (add-hook 'tuareg-mode-hook 'utop-minor-mode)
      :diminish utop-minor-mode)
    (use-package ocp-indent
      :load-path opam-site-lisp
      :commands ocp-setup-indent
      :init (add-hook 'tuareg-mode-hook 'ocp-setup-indent)))
#+END_SRC

** Polymode
#+BEGIN_SRC emacs-lisp
  (use-package polymode
    :ensure t)
#+END_SRC

** Popwin

#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :config (popwin-mode 1))
#+END_SRC

** Powerline

#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :disabled t
    :ensure t
    :config (powerline-default-theme))
#+END_SRC

** Proof General

#+BEGIN_SRC emacs-lisp
  (use-package proof-meta
    :defer t
    :init
    (use-package proof-site
      :load-path "~/.emacs.d/site-lisp/proof-general/ProofGeneral/generic")
    (use-package company-coq
      :ensure t
      :commands company-coq-initialize
      :init (add-hook 'coq-mode-hook 'company-coq-initialize)))
#+END_SRC

** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Slime

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :commands (slime slime-mode)
    :init
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC

** SML

#+BEGIN_SRC emacs-lisp
  (use-package sml-meta
    :defer t
    :init
    (use-package sml-mode
      :ensure t
      :commands (sml-mode sml-run))
    (use-package ob-sml
      :ensure t))
#+END_SRC

** Unicode Fonts

#+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :ensure t
    :config
    (unicode-fonts-setup))
#+END_SRC
