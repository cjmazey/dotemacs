#+TITLE: Emacs Configuration
#+OPTIONS: num:nil
#+STARTUP: indent

* Tangle

Execute to create =init.el=.

#+BEGIN_SRC emacs-lisp :tangle no :results silent
  (org-babel-tangle-file
   (expand-file-name "init.org" user-emacs-directory)
   (expand-file-name "init.el" user-emacs-directory)
   "emacs-lisp")
#+END_SRC

* Initialization

** Customize

Don't really use customize.

#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el"
                          user-emacs-directory))
  ;(load custom-file)
#+END_SRC

** Package

Set up =package=.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives
               '("org" . "http://orgmode.org/elpa/"))
  (package-initialize)
#+END_SRC

** Use-package

Install =use-package= if it isn't there.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (setq use-package-verbose t)
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

* Settings

Global settings.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (add-hook 'text-mode-hook 'auto-fill-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
  (column-number-mode 1)
  (global-hl-line-mode 1)
  (set-language-environment "UTF-8")
  (show-paren-mode 1)
  (size-indication-mode 1)
  (setq auto-save-default nil
        default-frame-alist '((width . 90)
                              (height . 40)
                              (menu-bar-lines . 0)
                              (vertical-scroll-bars . nil)
                              (tool-bar-lines . 0))
        inhibit-startup-echo-area-message t
        make-backup-files nil
        mouse-wheel-progressive-speed nil
        mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control)))
        scroll-conservatively 101
        visible-bell t)
  (setq-default indent-tabs-mode nil
                major-mode 'text-mode
                require-final-newline t)
#+END_SRC

* Appearance

** Themes

#+BEGIN_SRC emacs-lisp
  (dolist (theme '(apropospriate-theme
                   doom-themes
                   farmhouse-theme
                   inkpot-theme
                   leuven-theme
                   majapahit-theme
                   material-theme
                   solarized-theme
                   spacemacs-theme
                   tao-theme))
    (unless (package-installed-p theme)
      (package-refresh-contents)
      (package-install theme)))
  (load-theme 'apropospriate-light 'no-confirm)
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
  (let ((font "IBM 3270 Medium"))
    (set-face-attribute 'default nil
                        :font (concat font " 11"))
    (set-face-attribute 'fixed-pitch nil
                        :font (concat font " 11"))
    (set-face-attribute 'variable-pitch nil
                        :font "Noto Sans 9")
    (set-face-attribute 'Info-quoted nil
                        :font (concat font " 9")
                        :inherit font-lock-keyword-face))
#+END_SRC

* Global keybindings

#+BEGIN_SRC emacs-lisp
  (bind-key "M-<left>" 'windmove-left)
  (bind-key "M-<right>" 'windmove-right)
  (bind-key "M-<up>" 'windmove-up)
  (bind-key "M-<down>" 'windmove-down)
#+END_SRC

* Packages

** Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib
    :bind (("C-c o a" . org-agenda)
           ("C-c o b" . org-iswitchb)
           ("C-c o c" . org-capture)
           ("C-c o l" . org-store-link))
    :config
    (add-to-list 'org-modules 'org-habit)
    (setq org-directory "~/.emacs.d/org"
          org-agenda-files '("~/.emacs.d/org/agendas")
          org-capture-templates '(("t" "Task" entry
                                   (file "agendas/tasks.org")
                                   "* TODO %?\n  %u\n  %a")
                                  ("p" "Poem" entry
                                   (file "poems.org")
                                   "* UNPUBLISHED %?\n\n%i\n\n%U" :empty-lines 1))
          org-habit-graph-column 57
          org-latex-create-formula-image-program 'imagemagick
          org-refile-use-outline-path t)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (latex . t)
       (maxima . t)))
    (add-to-list 'org-latex-packages-alist '("" "tikz" t))
    (with-eval-after-load 'ox-html
      (add-to-list 'org-html-mathjax-options
                   '(path "http://localhost/mathjax/MathJax.js?config=TeX-AMS_HTML"))
      (add-to-list 'org-html-infojs-options
                   '(path . "http://localhost/org-info.js"))))
#+END_SRC

** Ace-window

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure ace-window
    :bind ("M-p" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-dispatch-always t))
#+END_SRC

** Anaconda

#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
    (use-package company-anaconda
      :ensure t
      :config
      (eval-after-load "company"
        '(add-to-list 'company-backends 'company-anaconda))))
#+END_SRC

** AUCTex

#+BEGIN_SRC emacs-lisp
  (use-package tex-site
    :ensure auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (use-package company-auctex
      :ensure t
      :config (company-auctex-init)))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config (global-company-mode 1)
    :diminish company-mode)
#+END_SRC

** ElDoc

#+BEGIN_SRC emacs-lisp
  (use-package eldoc
    :config (global-eldoc-mode 1)
    :diminish eldoc-mode)
#+END_SRC

** Elpy

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :disabled t
    :ensure t
    :config
    (elpy-enable)
    (elpy-use-ipython))
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config (global-flycheck-mode 1))
#+END_SRC

** Golden Ratio

#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :config (golden-ratio-mode)
    :diminish golden-ratio-mode)
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm-config
    :ensure helm
    :demand t
    :bind (("C-S-z" . helm-buffers-list)
           ("C-x C-f" . helm-find-files)
           ("C-x p" . helm-browse-project)
           ("C-z" . helm-mini)
           ("M-x" . helm-M-x))
    :config
    (use-package helm-mode
      :diminish helm-mode
      :init (helm-mode 1))
    (use-package helm-ls-git
      :ensure helm-ls-git)
    (use-package helm-swoop
      :ensure t
      :bind (("M-s o" . helm-swoop)
             ("M-s /" . helm-multi-swoop))))
#+END_SRC

** Idris

#+BEGIN_SRC emacs-lisp
  (use-package idris-mode
    :ensure t
    :commands (idris-mode))
#+END_SRC

** Lean

#+BEGIN_SRC emacs-lisp
  (defvar lean-mode-required-packages
    '(company dash dash-functional f
              flycheck let-alist s seq))
  (let ((need-to-refresh t))
    (dolist (p lean-mode-required-packages)
      (when (not (package-installed-p p))
        (when need-to-refresh
          (package-refresh-contents)
          (setq need-to-refresh nil))
        (package-install p))))

  (use-package lean-mode
    :load-path "~/opt/leanprover/usr/share/emacs/site-lisp/lean/"
    :mode "\\.h?lean\\'"
    :init (setq lean-rootdir "~/opt/leanprover/usr"))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+END_SRC

** Popwin

#+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :config (popwin-mode 1))
#+END_SRC

** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Sage

#+BEGIN_SRC emacs-lisp
  (use-package sage-shell-mode
    :ensure t
    :commands (sage-shell:run-sage sage-shell:sage-mode)
    :config
    (setq sage-shell:user-prompt-toolkit t)
    (sage-shell:define-alias)
    (use-package helm-sage
      :ensure t))
#+END_SRC

** Slime

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :commands (slime slime-mode)
    :config
    (setq inferior-lisp-program "sbcl")
    (setq slime-contribs '(slime-fancy)))
#+END_SRC

** SML

#+BEGIN_SRC emacs-lisp
  (use-package sml-mode
    :ensure t
    :commands (sml-mode sml-run))
  (use-package ob-sml
    :ensure t
    :defer t)
#+END_SRC

** Unicode Fonts

#+BEGIN_SRC emacs-lisp
  (use-package unicode-fonts
    :ensure t
    :config (unicode-fonts-setup))
#+END_SRC
