#+TITLE: Emacs Configuration
#+OPTIONS: num:nil
#+STARTUP: indent

* Header
#+BEGIN_SRC emacs-lisp
  ;;; init-org --- init-org.el

  ;;; Commentary:

  ;;  Do not edit this file; it is automatically generated by
  ;;  org-babel-load-file.  Edit init-org.org instead.

  ;;; Code:
#+END_SRC

* Usage
To use this, make =init.el= the following:

#+BEGIN_SRC emacs-lisp :tangle no
  (org-babel-load-file
   (expand-file-name "init-org.org"
                     user-emacs-directory))
#+END_SRC

* Initialization

** Customize

Don't really use customize.

#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el"
                          user-emacs-directory))
  ;(load custom-file)
#+END_SRC

** Package

Set up =package=.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))
  (package-initialize)
#+END_SRC

** Use-package

Install =use-package= if it isn't there.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+END_SRC

* Settings

Miscellaneous things that don't fit anywhere else.

#+BEGIN_SRC emacs-lisp
  (use-package init-meta
    :defer t
    :init
    (add-hook 'before-save-hook 'delete-trailing-whitespace)
    (add-hook 'text-mode-hook 'auto-fill-mode)
    (column-number-mode 1)
    (global-eldoc-mode 1)
    (global-hl-line-mode 1)
    (set-language-environment "UTF-8")
    (setq auto-save-default nil)
    (setq default-frame-alist
          '((width . 80)
            (height . 50)
            (menu-bar-lines . 0)
            (vertical-scroll-bars . nil)
            (tool-bar-lines . 0)))
    (setq indent-tabs-mode nil)
    (setq inhibit-startup-echo-area-message t)
    (setq inhibit-startup-message t)
    (setq major-mode 'text-mode)
    (setq make-backup-files nil)
    (setq mouse-wheel-progressive-speed nil)
    (setq mouse-wheel-scroll-amount (quote (1 ((shift) . 1) ((control)))))
    (setq require-final-newline t)
    (setq scroll-conservatively 101)
    (show-paren-mode 1)
    (size-indication-mode 1))
#+END_SRC

* Appearance

** Themes

#+BEGIN_SRC emacs-lisp
  (use-package theme-meta
    :defer t
    :init
    (use-package apropospriate-theme :ensure t :defer t)
    (use-package autumn-light-theme :ensure t :defer t)
    (use-package faff-theme :ensure t :defer t)
    (use-package farmhouse-theme :ensure t :defer t)
    (use-package leuven-theme :ensure t :defer t)
    (use-package majapahit-theme :ensure t :defer t)
    (use-package moe-theme :ensure t :defer t)
    (use-package monokai-theme :ensure t :defer t)
    (use-package solarized-theme :ensure t :defer t)
    (use-package spacemacs-theme :ensure t :defer t)
    (use-package ubuntu-theme :ensure t :defer t)
    (use-package zenburn-theme :ensure t :defer t)
    (load-theme 'spacemacs-light 'no-confirm))
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
  (use-package face-meta
    :defer t
    :init
    (set-face-attribute 'default nil
                        :font "Source Code Pro 8")
    (set-face-attribute 'fixed-pitch nil
                        :font "Source Code Pro 8")
    (set-face-attribute 'variable-pitch nil
                        :font "Noto Sans 8")
    (set-face-attribute 'Info-quoted nil
                        :font "Source Code Pro 8"
                        :background "lemon chiffon"
                        :foreground "indian red"))
#+END_SRC

* Global keybindings

#+BEGIN_SRC emacs-lisp
  (use-package bind-key-meta
    :defer t
    :init
    (bind-key "M-<left>" 'windmove-left)
    (bind-key "M-<right>" 'windmove-right)
    (bind-key "M-<up>" 'windmove-up)
    (bind-key "M-<down>" 'windmove-down))
#+END_SRC

* Packages

** Agda

#+BEGIN_SRC emacs-lisp
  (use-package agda2
    :defer t
    :init
    (let ((coding-system-for-read 'utf-8)
          (file (shell-command-to-string "agda-mode locate")))
      (when (file-exists-p file)
        (load-file file))))
#+END_SRC

** Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config (global-company-mode 1)
    :diminish company-mode)
#+END_SRC

** Flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config (global-flycheck-mode 1))
#+END_SRC

** Golden Ratio

#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :config (golden-ratio-mode)
    :diminish golden-ratio-mode)
#+END_SRC

** Haskell

#+BEGIN_SRC emacs-lisp
  (use-package haskell-meta
    :defer t
    :init
    (use-package haskell-mode
      :ensure t)
    (use-package flycheck-haskell
      :ensure t))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
  (use-package helm-meta
    :defer t
    :init
    (use-package helm-config
      :ensure helm
      :demand t
      :bind (("C-x C-f" . helm-find-files)
             ("C-Z" . helm-buffers-list)
             ("C-z" . helm-mini)
             ("M-x" . helm-M-x))
      :config
      (use-package helm-mode
        :diminish helm-mode
        :init (helm-mode 1))))
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
#+END_SRC

** Ocaml

#+BEGIN_SRC emacs-lisp
  (eval-and-compile
    (defvar opam-site-lisp
      (concat
       (substring
        (shell-command-to-string "opam config var share 2> /dev/null")
        0 -1)
       "/emacs/site-lisp")))

  (use-package ocaml-meta
    :defer t
    :init
    (use-package tuareg
      :ensure t
      :commands tuareg-mode)
    (use-package merlin
      :load-path opam-site-lisp
      :commands merlin-mode
      :init (add-hook 'tuareg-mode-hook 'merlin-mode))
    (use-package utop
      :load-path opam-site-lisp
      :commands (utop utop-minor-mode)
      :init (add-hook 'tuareg-mode-hook 'utop-minor-mode)
      :diminish utop-minor-mode)
    (use-package ocp-indent
      :load-path opam-site-lisp
      :commands ocp-setup-indent
      :init (add-hook 'tuareg-mode-hook 'ocp-setup-indent)))
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :bind (("C-c o a" . org-agenda)
           ("C-c o b" . org-iswitchb)
           ("C-c o c" . org-capture)
           ("C-c o l" . org-store-link))
    :config (setq org-src-fontify-natively t))
#+END_SRC

** Proof General

#+BEGIN_SRC emacs-lisp
  (use-package proof-meta
    :defer t
    :init
    (use-package proof-site
      :load-path "~/.emacs.d/site-lisp/proof-general/ProofGeneral/generic")
    (use-package company-coq
      :ensure t
      :commands company-coq-initialize
      :init (add-hook 'coq-mode-hook 'company-coq-initialize)))
#+END_SRC

** Slime

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :ensure t
    :commands (slime slime-mode))
#+END_SRC

** SML

#+BEGIN_SRC emacs-lisp
  (use-package sml-meta
    :defer t
    :init
    (use-package sml-mode
      :ensure t
      :commands (sml-mode sml-run))
    (use-package ob-sml
      :ensure t))
#+END_SRC

* Footer
#+BEGIN_SRC emacs-lisp
  (provide 'init-org)
  ;;; init-org.el ends here
#+END_SRC
